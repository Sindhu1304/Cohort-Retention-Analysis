# -*- coding: utf-8 -*-
"""Cohort_Retention_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15tFGPgGXJ4zdLmazA_K9Uwd0l7zy0HuA
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
df = pd.read_csv("/content/drive/MyDrive/Subscription Cohort Analysis Data.csv")
df.head(10)

df.info()

df.columns

df.isnull().sum()

from datetime import datetime

df['created_date'] = pd.to_datetime(df['created_date'], errors='coerce')
df['canceled_date'] = pd.to_datetime(df['canceled_date'], errors='coerce')



df['active_status'] = df['canceled_date'].isna().apply(
    lambda x: 'Active' if x else 'Canceled'
)

df.head(10)

# Step 2: Replace NaN with dataset's final active date (for duration calc)
df['canceled_date'] = df['canceled_date'].fillna(pd.Timestamp('2023-09-30'))
df.isnull().sum()

df['subscription_duration'] = (df['canceled_date'] - df['created_date']).dt.days

df['cohort_month'] = df['created_date'].dt.to_period('M')

df.head(10)

duplicate_customer_ids = df.duplicated(subset=['customer_id'])
print("Number of duplicate customer IDs:", duplicate_customer_ids.sum())

df['subscription_id'] = df.groupby('customer_id').cumcount() + 1
df.head(10)

duplicates = df[df.duplicated(['customer_id', 'created_date'], keep=False)]
duplicates

"""## **Data Validation & Summary Metrics**

### **Data Validation**
"""

# Negative durations check
print(df[df['subscription_duration'] < 0])

# Check for mismatched statuses
df_check = df[(df['active_status'] == 'Active') & (df['canceled_date'].notnull())]
df_check

df[df.duplicated()]

"""### **Summary Metrics**"""

total_customers = df['customer_id'].nunique()
total_subscriptions = df['subscription_id'].count()
active_customers = df[df['active_status'] == 'Active']['customer_id'].nunique()
churned_customers = df[df['active_status'] == 'Canceled']['customer_id'].nunique()
resubscribers = df[df['subscription_id'] > 1]['customer_id'].nunique()

print("Total unique customers:", total_customers)
print("Total subscriptions:", total_subscriptions)
print("Active customers:", active_customers)
print("Churned customers:", churned_customers)
print("Re-subscribers:", resubscribers)

"""### **Revenue Summary**"""

paid_users = df[df['was_subscription_paid'] == 'Yes']
paid_users

total_revenue = paid_users['subscription_cost'].sum()
avg_revenue_per_user = total_revenue / df['customer_id'].nunique()

print(f"Total Revenue: {total_revenue}")
print(f"Average Revenue per User (ARPU): {avg_revenue_per_user:.2f}")



"""### **Duration Validation**"""

df['subscription_duration'].describe()

df.to_csv("/content/drive/MyDrive/final_cleaned_subscription.csv", index=False)
print(" Cleaned dataset exported successfully to Drive")

df.dtypes

"""## **Cohort Logic**"""

# 2Ô∏è‚É£ Convert date columns to datetime
df['created_date'] = pd.to_datetime(df['created_date'])
df['canceled_date'] = pd.to_datetime(df['canceled_date'], errors='coerce')

# 3Ô∏è‚É£ Define cohort_month ‚Äî the first month each user subscribed
df['cohort_month'] = df.groupby('customer_id')['created_date'].transform('min').dt.to_period('M')

# 4Ô∏è‚É£ Define active_month ‚Äî the month of each subscription record
df['active_month'] = df['created_date'].dt.to_period('M')

# 5Ô∏è‚É£ Calculate cohort_index ‚Äî months since user‚Äôs first subscription
df['cohort_index'] = (df['active_month'].dt.year - df['cohort_month'].dt.year) * 12 + \
                     (df['active_month'].dt.month - df['cohort_month'].dt.month) + 1

# 6Ô∏è‚É£ Save the cohort-ready dataset
df.to_csv("cohort_ready_data.csv", index=False)

print("Cohort-ready data saved successfully!")
df.head()

"""## **Retention Metrics**"""

import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("cohort_ready_data.csv")
df['cohort_month'] = pd.PeriodIndex(df['cohort_month'], freq='M')
df['active_month'] = pd.PeriodIndex(df['active_month'], freq='M')

# 3Ô∏è‚É£ Count unique active users per cohort & active month
cohort_data = (
    df.groupby(['cohort_month', 'active_month'])['customer_id']
      .nunique()
      .reset_index()
      .rename(columns={'customer_id': 'active_users'})
)

# 4Ô∏è‚É£ Get cohort sizes (number of users in the first month)
cohort_sizes = cohort_data[cohort_data['cohort_month'] == cohort_data['active_month']]
cohort_sizes = cohort_sizes[['cohort_month', 'active_users']].rename(columns={'active_users': 'cohort_size'})

# 5Ô∏è‚É£ Merge to add cohort size to every row
cohort_data = pd.merge(cohort_data, cohort_sizes, on='cohort_month')

# 6Ô∏è‚É£ Calculate retention rate
cohort_data['retention_rate'] = (cohort_data['active_users'] / cohort_data['cohort_size']).round(3)

# 7Ô∏è‚É£ Add cohort_index again (months since joining)
cohort_data['cohort_index'] = (
    (cohort_data['active_month'].dt.year - cohort_data['cohort_month'].dt.year) * 12 +
    (cohort_data['active_month'].dt.month - cohort_data['cohort_month'].dt.month) + 1
)

# 8Ô∏è‚É£ Create retention matrix (pivot table)
retention_matrix = cohort_data.pivot_table(
    index='cohort_month',
    columns='cohort_index',
    values='retention_rate'
).fillna(0)

# 9Ô∏è‚É£ Plot retention heatmap
plt.figure(figsize=(12, 6))
sns.heatmap(retention_matrix, annot=True, fmt=".0%", cmap="Blues")
plt.title("Cohort Retention Heatmap", fontsize=16)
plt.xlabel("Cohort Index (Months Since Joining)")
plt.ylabel("Cohort Month")
plt.show()

# üîü Save both tables
cohort_data.to_csv("cohort_retention_metrics.csv", index=False)
retention_matrix.to_csv("retention_matrix.csv")

print("Retention metrics saved")

df.dtypes

cohort_retention_metrics = pd.read_csv("cohort_retention_metrics.csv")
cohort_retention_metrics.head()

cohort_retention_metrics.dtypes